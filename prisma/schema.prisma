
generator client {
  provider = "prisma-client-js"
}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CHEF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

// model User {
//   // Base User Fields
//   id           String        @id @default(cuid())
//   email        String        @unique
//   password     String
//   role         Role
//   createdAt    DateTime      @default(now())
//   updatedAt    DateTime      @updatedAt

//   // Role-Specific Relationships
//   admin admin?
//   // chef  chef?
//   customer customer?
// }

// model admin {
//   id          String     @id @default(cuid())
//   userId      String     @unique
//   user        User       @relation(fields: [userId], references: [id])
//   createdAt   DateTime   @default(now())
// }

// model chef {
//   id           String     @id @default(cuid())
//   userId       String     @unique
//   user         User       @relation(fields: [userId], references: [id])

//   orders       Order[]

//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt
// }




model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  password String
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token     String?
  expires_at       Int?
  token_type       String?
  scope            String?
  id_token         String?
  session_state    String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}


model customer {
  id              String     @id @default(cuid())
  // userId          String     @unique
  // user            User       @relation(fields: [userId], references: [id])

  address String?
  phone           String?

  orders          Order[]

  favoriteItems product[] @relation("Favorites")

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Category {
  id          String     @id @default(cuid())
  name        String
  imageUrl    String?
  count       Int?     @default(0)
  menuItems   product[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model product {
  id           String     @id @default(cuid())
  name         String
  description  String
  price        Float
  imageUrl     String?

  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id])


  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt


  rating Float 

  customer customer[] @relation("Favorites")


  OrderItem OrderItem[]


  prepTime  Int


  ingredients String[] 

  nutritionalInfo String[] 

}

model Order {
  id           String      @id @default(cuid())
  status       OrderStatus @default(PENDING)
  customer     customer @relation(fields: [customerId], references: [id])
  customerId   String


  items        OrderItem[]
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderedAt    DateTime    @default(now())

  acceptedAt   DateTime?
  preparedAt   DateTime?
  deliveredAt  DateTime?
}

model OrderItem {

  id         String    @id @default(cuid())

  quantity   Int       @default(1)

  menuItem   product  @relation(fields: [menuItemId], references: [id])
  menuItemId String

  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String


  createdAt  DateTime  @default(now())
}