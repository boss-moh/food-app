generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleStatus {
  ADMIN
  CUSTOMER
  CHEF
  DRIVER
}

enum OrderStatus {
  PENDING
  PREPARING
  DELIVERED
  CANCELLED
  DONE
  REJECTED
}

model User {
  id    String  @id @default(cuid())
  name  String
  email String  @unique
  // emailVerified DateTime? @map("email_verified")
  image String?

  orders Order[]

  accounts Account[]

  password String? // <-- add this field to store the hashed password
  role     RoleStatus @default(CUSTOMER)

  favoriteItems product[] @relation("Favorites")

  feedback feedBack[]

  phone String

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Category {
  id       String @id @default(cuid())
  name     String
  imageUrl String
  count    Int    @default(0)

  menuItems product[]

  date DateTime @default(now())
}

model product {
  id          String @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  date DateTime @default(now())

  customer User[] @relation("Favorites")

  OrderItem OrderItem[]

  prepTime Int

  ingredients String[]

  nutritionalInfo String[]

  rating      Float      @default(0)
  rateCount   Int        @default(0)
  isAvailable Boolean    @default(true)
  feedback    feedBack[]
}

model feedBack {
  id String @id @default(cuid())

  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  customer   User   @relation(fields: [customerId], references: [id])
  customerId String

  date    DateTime @default(now())
  rating  Int
  content String
}

model Order {
  id String @id @default(cuid())

  status OrderStatus @default(PENDING)

  subTotal Float // Total cost of all items
  tax      Float // Tax amount
  total    Float

  items OrderItem[]
  date  DateTime    @default(now())
  note  String?

  address String

  customerId String
  customer   User   @relation(fields: [customerId], references: [id])
}

model OrderItem {
  id String @id @default(cuid())

  quantity Int   @default(1)
  price    Float // This will store the price copied from the Product

  product   product @relation(fields: [productId], references: [id])
  productId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String
}
