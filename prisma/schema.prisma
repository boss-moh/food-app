generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleStatus {
  ADMIN
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
  DONE
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?

  accounts Account[]

  password String? // <-- add this field to store the hashed password
  role     RoleStatus @default(CUSTOMER)
  admin    admin?

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model admin {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model customer {
  id String @id @default(cuid())

  address String?
  phone   String?

  orders Order[]

  favoriteItems product[] @relation("Favorites")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       String @id @default(cuid())
  name     String
  imageUrl String
  count    Int    @default(0)

  menuItems product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model product {
  id          String @id @default(cuid())
  name        String
  description String
  price       Float
  imageUrl    String

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rating Float

  customer customer[] @relation("Favorites")

  OrderItem OrderItem[]

  prepTime Int

  ingredients String[]

  nutritionalInfo String[]
}

model Order {
  id         String      @id @default(cuid())
  status     OrderStatus @default(PENDING)
  customer   customer    @relation(fields: [customerId], references: [id])
  customerId String

  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  orderedAt DateTime @default(now())

  acceptedAt  DateTime?
  preparedAt  DateTime?
  deliveredAt DateTime?
}

model OrderItem {
  id String @id @default(cuid())

  quantity Int @default(1)

  menuItem   product @relation(fields: [menuItemId], references: [id])
  menuItemId String

  order   Order  @relation(fields: [orderId], references: [id])
  orderId String

  createdAt DateTime @default(now())
}

// model Image {
//   id        String      @id @default( cuid() ) // Unique ID
//   url       String   // Cloudinary URL
//   title     String?  // Optional title or description

// }
