
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  CHEF
  CUSTOMER
}

enum OrderStatus {
  PENDING
  PREPARING
  READY
  DELIVERED
  CANCELLED
}

model User {
  // Base User Fields
  id           String        @id @default(cuid())
  email        String        @unique
  password     String
  role         Role
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  // Role-Specific Relationships
  admin admin?
  // chef  chef?
  customer customer?
}

model admin {
  id          String     @id @default(cuid())
  userId      String     @unique
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
}

// model chef {
//   id           String     @id @default(cuid())
//   userId       String     @unique
//   user         User       @relation(fields: [userId], references: [id])

//   orders       Order[]

//   createdAt    DateTime   @default(now())
//   updatedAt    DateTime   @updatedAt
// }

model customer {
  id              String     @id @default(cuid())
  userId          String     @unique
  user            User       @relation(fields: [userId], references: [id])

  address String?
  phone           String?

  orders          Order[]

  favoriteItems product[] @relation("Favorites")

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Category {
  id          String     @id @default(cuid())
  name        String
  imageUrl    String?
  count       Int?     @default(0)
  menuItems   product[]

  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model product {
  id           String     @id @default(cuid())
  name         String
  description  String
  price        Float
  imageUrl     String?

  categoryId   String
  category     Category   @relation(fields: [categoryId], references: [id])


  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt




  customer customer[] @relation("Favorites")


  OrderItem OrderItem[]
}

model Order {
  id           String      @id @default(cuid())
  status       OrderStatus @default(PENDING)
  customer     customer @relation(fields: [customerId], references: [id])
  customerId   String


  items        OrderItem[]
  
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  orderedAt    DateTime    @default(now())

  acceptedAt   DateTime?
  preparedAt   DateTime?
  deliveredAt  DateTime?
}

model OrderItem {

  id         String    @id @default(cuid())

  quantity   Int       @default(1)

  menuItem   product  @relation(fields: [menuItemId], references: [id])
  menuItemId String

  order      Order     @relation(fields: [orderId], references: [id])
  orderId    String


  createdAt  DateTime  @default(now())
}